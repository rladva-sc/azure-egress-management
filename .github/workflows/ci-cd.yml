name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        pytest --cov=src

  build:
    name: Build Package
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/
        
    - name: Create package archive
      run: |
        mkdir -p package
        cp -r src package/
        cp -r docs package/
        cp -r scripts package/
        cp README.md package/
        cp config.json.template package/
        tar -czvf azure-egress-management.tar.gz package/
    
    - name: Upload package archive
      uses: actions/upload-artifact@v2
      with:
        name: package
        path: azure-egress-management.tar.gz

  deploy_dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Download package archive
      uses: actions/download-artifact@v2
      with:
        name: package
        
    - name: Deploy to Azure Development
      uses: azure/webapps-deploy@v2
      if: false  # Disabled until Azure resources are configured
      with:
        app-name: 'egress-mgmt-dev'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: azure-egress-management.tar.gz
    
    - name: Notify deployment
      run: |
        echo "Deployed to development environment"

  deploy_prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Download package archive
      uses: actions/download-artifact@v2
      with:
        name: package
        
    - name: Deploy to Azure Production
      uses: azure/webapps-deploy@v2
      if: false  # Disabled until Azure resources are configured
      with:
        app-name: 'egress-mgmt-prod'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: azure-egress-management.tar.gz
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: azure-egress-management.tar.gz
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
